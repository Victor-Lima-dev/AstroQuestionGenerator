// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using worker.context;

#nullable disable

namespace worker.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PerguntaTAG", b =>
                {
                    b.Property<Guid>("PerguntasId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TAGsId")
                        .HasColumnType("char(36)");

                    b.HasKey("PerguntasId", "TAGsId");

                    b.HasIndex("TAGsId");

                    b.ToTable("PerguntaTAG");
                });

            modelBuilder.Entity("worker.Models.Lista", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Listas");
                });

            modelBuilder.Entity("worker.Models.Pergunta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Erro")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Explicacao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ListaId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RequisicaoId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("Valided")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ListaId");

                    b.ToTable("Perguntas");
                });

            modelBuilder.Entity("worker.Models.Requisicao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("Valided")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Requisicoes");
                });

            modelBuilder.Entity("worker.Models.Resposta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Correta")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Erro")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("PerguntaId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("Valided")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("PerguntaId");

                    b.ToTable("Respostas");
                });

            modelBuilder.Entity("worker.Models.TAG", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TAGs");
                });

            modelBuilder.Entity("worker.Models.TextoBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RequisicaoId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TextosBase");
                });

            modelBuilder.Entity("PerguntaTAG", b =>
                {
                    b.HasOne("worker.Models.Pergunta", null)
                        .WithMany()
                        .HasForeignKey("PerguntasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("worker.Models.TAG", null)
                        .WithMany()
                        .HasForeignKey("TAGsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("worker.Models.Pergunta", b =>
                {
                    b.HasOne("worker.Models.Lista", null)
                        .WithMany("Perguntas")
                        .HasForeignKey("ListaId");
                });

            modelBuilder.Entity("worker.Models.Resposta", b =>
                {
                    b.HasOne("worker.Models.Pergunta", null)
                        .WithMany("Respostas")
                        .HasForeignKey("PerguntaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("worker.Models.Lista", b =>
                {
                    b.Navigation("Perguntas");
                });

            modelBuilder.Entity("worker.Models.Pergunta", b =>
                {
                    b.Navigation("Respostas");
                });
#pragma warning restore 612, 618
        }
    }
}
